#+Title: Install tasks on dB.

* PostgreSQL, Yoi dB creation.
  
** Connect to Postgres

  1. From terminal/console, we need to be root (It depends on your PostgreSQL setup):

      #+begin_example
      user@foo:~$ su
      Contraseña:
      
      root@foo:/home/user#  <<---The # symbol tell us we are root now.
      #+end_example

  2. Next, we change the user to the postgres user:
      
      #+begin_example
      root@foo:/home/user# su - postgres
      postgres@foo:~$
      #+end_example

  3. Then we need to connect to the psql console;

      #+begin_example
      postgres@foo:~$ psql
      
      psql (9.1.6)
      Digite «help» para obtener ayuda.

      postgres=#  <<-- Here we can see we are now into psql console.
      #+end_example

** Create yoi_db and user.
  4. Create the data base
      #+begin_example
      CREATE DATABASE yoi_db;
      #+end_example

  5. Create the user with a password:
   #+begin_example
     CREATE USER yoi_dbuser with password 'd3f4ulty01p4ss$';
   #+end_example

  6. Change the dB owner:
     #+begin_example
     ALTER DATABASE yoi_db OWNER TO yoi_dbuser;
     #+end_example


  7. Coonnect to the dB:
     
      \c yoi_db


      #+begin_example
      postgres=# \c yoi_db
      Ahora está conectado a la base de datos «yoi_db» con el usuario «postgres».
      yoi_db=# <<-- As we can see now we are connected to the yoi_db dB.
      #+end_example

** dB tables creation.
   
   The definitions and code to create the dB tables are on the file /postmodern-tables-creation.lisp/, to create the tables in the dB we need to execute only one time the code in the file from the REPL, from inside the ws.ikki.yoi package. 

* Create the admin user.

 - Load the system with quicklisp
 
 - Change the data in db/admin-user-creation.lisp as you prefer.

 - In package :yoi execute the function insert-admin-user-on-db.

 - You can login using the user and password provided using the following url:

  http://localhost:9090/admin.ucw

 

* Set the right sequence in dB. 

If you are doing a fresh, clean install, then you don't have to worry about this problem. So you just can safely skip this section.

When you, for some reason, migrate your dB data, you need to set the sequences to their right value according to the las one used in your already existent information.

For example, if I have 8 topics on my dB, then I migrate this data to a new location on a new dB, the table still has topic:id(s) from 1 to 8, and when I try to add another topic from Yoi, Postgres signals an error of duplicate key, because it tries to insert a topic_id with value 1 which already exists on the table.



You need to instruct PostgreSQL to set the right sequence value, with something like this:

 1. know the highest value of the sequence, as easy as use an select on the table and key. 
#+begin:example
yoi_db=# SELECT topic_id from  topics;
 topic_id 
----------
        1
        3
        4
        5
        2
        6
(6 filas)
#+end_example
The value is 6.
2. Get the name of the sequence
#+begin:example
\d topics
                                                 Tabla «public.topics»
      Columna      |            Tipo             |                            Modificadores                            
-------------------+-----------------------------+---------------------------------------------------------------------
 topic_id          | integer                     | not null valor por omisión nextval('topics_topic_id_seq'::regclass)
#+end_example
The name is topics_topic_id_seq

 3. Update the value of the sequence:
#+begin:example
 SELECT pg_catalog.setval('topics_topic_id_seq', 6, true);
#+end_example

 4. Now you can add new topics (In this case)
